{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"a parallel, open-source geothermal flow simulator What's new? see the news page. Waiwera features : numerical simulation of high-temperature subsurface flows, including robust phase changes parallel execution on shared- or distributed-memory computers and clusters use of PETSc (Portable Extensible Toolkit for Scientific Computation) for parallel data structures, linear and non-linear solvers, etc. standard file formats for input ( JSON ) and output ( HDF5 , YAML ) structured, object-oriented code written in Fortran 2003 free, open-source license Waiwera was developed at the University of Auckland's Geothermal Institute . Initial development was part of the \"Geothermal Supermodels\" research project, funded by the NZ Ministry of Business, Innovation and Employment ( MBIE ), with additional support from Contact Energy Ltd . The word Waiwera comes from the M\u0101ori language and means \"hot water\".","title":"Introduction"},{"location":"contrib/","text":"Contributing to Waiwera Because Waiwera is released under a free, open-source license , you may contribute code. Waiwera's source code is written in Fortran 2003, so you will need to be familiar with that in order to contribute. You will also need to know how to use the Git version control system. Pull requests You can contribute code to Waiwera by submitting a \" pull request \". To do this, first you need to fork the Waiwera repository and check it out onto your local machine. You can commit your changes locally and then push them back up to your fork on Github. Finally, you can make a pull request on the Waiwera repository. Your proposed changes will then be reviewed, discussed and altered as necessary. If it is agreed that your changes are appropriate then they will be merged into the Waiwera code. Unit tests Waiwera uses a test-driven development cycle, so in general any new code should be accompanied by unit tests to make sure it works correctly. Waiwera uses the Zofu library for creating unit tests. Reporting issues You can also help improve Waiwera by reporting any issues .","title":"Contributing"},{"location":"contrib/#contributing-to-waiwera","text":"Because Waiwera is released under a free, open-source license , you may contribute code. Waiwera's source code is written in Fortran 2003, so you will need to be familiar with that in order to contribute. You will also need to know how to use the Git version control system.","title":"Contributing to Waiwera"},{"location":"contrib/#pull-requests","text":"You can contribute code to Waiwera by submitting a \" pull request \". To do this, first you need to fork the Waiwera repository and check it out onto your local machine. You can commit your changes locally and then push them back up to your fork on Github. Finally, you can make a pull request on the Waiwera repository. Your proposed changes will then be reviewed, discussed and altered as necessary. If it is agreed that your changes are appropriate then they will be merged into the Waiwera code.","title":"Pull requests"},{"location":"contrib/#unit-tests","text":"Waiwera uses a test-driven development cycle, so in general any new code should be accompanied by unit tests to make sure it works correctly. Waiwera uses the Zofu library for creating unit tests.","title":"Unit tests"},{"location":"contrib/#reporting-issues","text":"You can also help improve Waiwera by reporting any issues .","title":"Reporting issues"},{"location":"install/","text":"Installation Waiwera can be run on most operating systems (e.g. Linux, Windows, Mac OS) using Docker . For many users this will be the easiest option. Linux users also have the option of building a native Waiwera executable . For full details, see the installation instructions in the Waiwera user guide. Using Docker When using Docker , Waiwera is run in a \"container\" holding the code and all its dependencies, isolated from the host machine, so that it should always run the same way. First, Docker itself needs to be installed. Installing Docker For Windows users, the Windows 10 Pro, Enterprise or Education versions are recommended, in which case Docker Desktop can be used. For other Windows versions, the older Docker Toolbox can be used, but this is less convenient and has a higher performance overhead than Docker Desktop. Similarly, users of macOS version 10.13 or later can use Docker Desktop, but users of older versions can use Docker Toolbox. Linux users can install Docker from their package management system. Installing PyWaiwera The easiest way to run Waiwera via Docker is by using the waiwera-dkr script, which is supplied as part of the PyWaiwera Python library. You will need to have Python installed on your machine. Then PyWaiwera can be installed from the Python Package Index (PyPI) using the pip package manager, e.g. pip install pywaiwera . Running using Docker The waiwera-dkr script handles installing and updating the Waiwera Docker container image, running Waiwera in the container, and managing the sharing of files between the container and your simulation directory. For example: waiwera-dkr -np 16 model.json uses Docker to run the model with JSON input file model.json on Waiwera, using 16 parallel processes. Native Linux build Building a native Waiwera executable on Linux systems can be carried out using Ansible , which manages checking and installing any necessary tools (compilers, build tools etc.), building dependency libraries and building Waiwera itself (which is done using the Meson build system). This is essentially a three-step process: installing Ansible, cloning or downloading the Waiwera source code, and building the Waiwera executable.","title":"Installation"},{"location":"install/#installation","text":"Waiwera can be run on most operating systems (e.g. Linux, Windows, Mac OS) using Docker . For many users this will be the easiest option. Linux users also have the option of building a native Waiwera executable . For full details, see the installation instructions in the Waiwera user guide.","title":"Installation"},{"location":"install/#using-docker","text":"When using Docker , Waiwera is run in a \"container\" holding the code and all its dependencies, isolated from the host machine, so that it should always run the same way. First, Docker itself needs to be installed.","title":"Using Docker"},{"location":"install/#installing-docker","text":"For Windows users, the Windows 10 Pro, Enterprise or Education versions are recommended, in which case Docker Desktop can be used. For other Windows versions, the older Docker Toolbox can be used, but this is less convenient and has a higher performance overhead than Docker Desktop. Similarly, users of macOS version 10.13 or later can use Docker Desktop, but users of older versions can use Docker Toolbox. Linux users can install Docker from their package management system.","title":"Installing Docker"},{"location":"install/#installing-pywaiwera","text":"The easiest way to run Waiwera via Docker is by using the waiwera-dkr script, which is supplied as part of the PyWaiwera Python library. You will need to have Python installed on your machine. Then PyWaiwera can be installed from the Python Package Index (PyPI) using the pip package manager, e.g. pip install pywaiwera .","title":"Installing PyWaiwera"},{"location":"install/#running-using-docker","text":"The waiwera-dkr script handles installing and updating the Waiwera Docker container image, running Waiwera in the container, and managing the sharing of files between the container and your simulation directory. For example: waiwera-dkr -np 16 model.json uses Docker to run the model with JSON input file model.json on Waiwera, using 16 parallel processes.","title":"Running using Docker"},{"location":"install/#native-linux-build","text":"Building a native Waiwera executable on Linux systems can be carried out using Ansible , which manages checking and installing any necessary tools (compilers, build tools etc.), building dependency libraries and building Waiwera itself (which is done using the Meson build system). This is essentially a three-step process: installing Ansible, cloning or downloading the Waiwera source code, and building the Waiwera executable.","title":"Native Linux build"},{"location":"issues/","text":"Issues Any issues, e.g. bug reports or feature requests, can be reported via the issue tracker on our Github repository. Check existing issues Before you report a new issue, please check through the existing issues first to make sure nobody else has already reported it. If they have, you may add a comment (if necessary) to the existing issue. Bug reports If you are making a bug report, please include as much detail as possible to help us identify the bug.","title":"Issues"},{"location":"issues/#issues","text":"Any issues, e.g. bug reports or feature requests, can be reported via the issue tracker on our Github repository.","title":"Issues"},{"location":"issues/#check-existing-issues","text":"Before you report a new issue, please check through the existing issues first to make sure nobody else has already reported it. If they have, you may add a comment (if necessary) to the existing issue.","title":"Check existing issues"},{"location":"issues/#bug-reports","text":"If you are making a bug report, please include as much detail as possible to help us identify the bug.","title":"Bug reports"},{"location":"license/","text":"License Waiwera is free, open-source software released under the GNU Lesser General Public License ( LGPL version 3), with source code available from our Github repository . Amongst other things, this means: anyone may potentially contribute code to Waiwera if you make modifications to your own copy of the Waiwera code, you are legally obliged to share those modifications back with the Waiwera project","title":"License"},{"location":"license/#license","text":"Waiwera is free, open-source software released under the GNU Lesser General Public License ( LGPL version 3), with source code available from our Github repository . Amongst other things, this means: anyone may potentially contribute code to Waiwera if you make modifications to your own copy of the Waiwera code, you are legally obliged to share those modifications back with the Waiwera project","title":"License"},{"location":"news/","text":"What's new? Waiwera 1.4.0 released 30 June 2023 - Waiwera version 1.4.0 is now released. The changes in this version include: source networks , representing interacting networks of sources and sinks, for modelling e.g. multi-feed wells, borefields with grouped production wells (and optional limits or targets imposed on the group), or reinjection salt equation of state modules - Waiwera now includes three new EOS modules for modelling mixtures of non-isothermal water, salt (sodium chloride) and non-condensible gases (currently carbon dioxide or air). These new EOS modules are wse (water, salt, energy), wsae (water, salt, air, energy) and wsce (water, salt, carbon dioxide, energy). allowing sources with no associated cell (e.g. for reinjection outside the model) allowing unlimited number of time steps (by setting time.step.maximum.number to null ) various minor code modifications to allow building Waiwera using newer versions (10, 11) of gfortran Waiwera 1.3.1 released 29 June 2022 - Waiwera version 1.3.1 is now released. The changes in this version include: time-dependent rock properties - rock permeabilities and porosities can now be assigned prescribed time-dependent values. modified handling of Dirichlet boundary conditions - equations for boundary ghost cells are no longer included in the Jacobian matrix (used to solve the non-linear flow equations at each time step). This makes the Jacobian significantly less ill-conditioned and slightly smaller. Jacobian output - Jacobian matrices can now be optionally output to a binary file. These may be used e.g. for inverse modelling or uncertainty quantification. added ability to set Jacobian differencing parameters in input (rather than as PETSc arguments). Modified time stepping behaviour around checkpoints - the pre-checkpoint time step size is now restored after hitting a checkpoint. PETSc update - PETSc version 3.15.5 will be downloaded and built if PETSc is not found on the system. Waiwera 1.3.0 released 8 September 2021 - Waiwera version 1.3.0 is now released. The changes in this version include: tracers - Waiwera can now simulate passive tracers. Any number of tracers can be simulated, in conjunction with any equation of state. Tracers may be either liquid-phase or vapour-phase, and the effects of diffusion and decay can be included. Decay can be constant or temperature-dependent. The tracer equations are solved independently of the flow equations, with only one additional linear solve needed per time step. output at faces - Waiwera can now optionally output results on mesh faces, e.g. component or phase mass or energy fluxes, and also face geometry (areas etc.) to the output HDF5 file. Face output is fully configurable by the user. It is also now possible to control (e.g. omit) the output of cell geometry data. PETSc update - PETSc version 3.15.2 or later is now required, and PETSc 3.15.4 will be downloaded and built if PETSc is not found on the system. new output datasets in the HDF5 file to simplify post-processing MINC simulations - these contain the MINC level and parent cell index for each cell in the output the Waiwera Docker images should now run on older CPUs. Previously the Docker images contained a PETSc library built using compiler settings which prevented it from running on older CPUs. This is now built using more generic settings so it should run on any x86 CPU capable of running Docker. a fix for a minor issue which prevented native Linux builds on distributions which no longer have Python 2 installed by default (e.g. Ubuntu 20.04) the user guide has new material on using the recently-released Layermesh library to create meshes for Waiwera models, and use them for pre- and post-processing the Waiwera continuous integration (CI) pipeline has been transferred from Travis CI to Github Actions Waiwera 1.2.1 released 20 July 2020 - Waiwera version 1.2.1 is now released. The main change in this version is that the installation process will now install MPICH instead of OpenMPI , if it does not detect any existing MPI on the system. This change was prompted by an apparent memory leak (possibly this one ) in some versions of OpenMPI, including version 3.1.3 which was used in the Waiwera 1.2 Docker image. That version of OpenMPI also has another bug which causes error messages when running in Docker containers. Waiwera 1.2 introduced a workaround for this bug in the waiwera-dkr script, but with the change to MPICH this is no longer needed, and has now been removed. Waiwera 1.2 released 8 June 2020 - Waiwera version 1.2 is now released. The changes in this version include: PETSc update : PETSc version 3.13.2 or later is now required, and PETSc 3.13.2 will be downloaded and built if PETSc is not found on the system. this new version of PETSc includes substantial modifications to the DMPlex class, including the ability to handle hybrid meshes with arbitrary mixes of cell types (8-node hexahedron, 6-node wedge, etc.). This means Waiwera is also now able to handle these meshes. a modification to the behaviour of the deliverability source control when a threshold pressure is specified. The deliverability control will now deactivate if the computed flow rate is larger in magnitude than the specified production rate (which can happen for time-dependent specified flow rates). the Waiwera executable now has --version and --help command line arguments . Running with no arguments now gives the more common behaviour of printing the help information, rather than prompting for a filename. the Travis continuous integration ( CI ) pipeline now includes the full suite of benchmark tests as well as just the unit tests. users can now run the benchmark tests via Docker , by passing the --docker argument to the benchmark test script. Waiwera Docker images are now based on a Debian 10 base image (was Debian 9 in previous versions). the waiwera-dkr utility now has --version and revised --help arguments, and its default number of parallel processes is now 1 (rather than the maximum available). Waiwera journal article published 23 May 2020 - the journal Computers and Geosciences has just published a research article titled \"Waiwera: a parallel open-source geothermal flow simulator\" . This contains details on why Waiwera was written, the governing equations used, numerical formulation and other implementation details, as well as results from various test problems. Waiwera 1.1 released 31 January 2020 - Waiwera version 1.1 is now released. This is a significant update and includes the following changes: MINC mesh rebalancing : after MINC processing, the mesh is redistributed to regain optimal load balancing, and hence better scaling behaviour for large parallel MINC problems. This entailed a substantial rewrite of parts of the Waiwera MINC code. PETSc update : PETSc version 3.12 or later is now required (some of its new features and bugfixes are needed for the MINC mesh rebalancing). If PETSc is not found on the system, version 3.12.3 will be downloaded and built. PyWaiwera : this is a new Python library for working with Waiwera simulations. Its source is in the main Waiwera source tree under /utils/pywaiwera , and it can be installed from PyPI using pip . For now, it contains only code related to running Waiwera via Docker, either from Python scripts or from the command line, for which it installs an executable waiwera-dkr script (which replaces the previous waiwera-dkr.py script). In future it is invisaged that other modules will be added to PyWaiwera, for assisting with pre- and post-processing. the new waiwera-dkr script includes many improvements and some new features, for example downloading example model input files using the --examples option. continuous integration (CI) using Travis for automated building/testing of Waiwera. additional log file messages for reporting simulation degrees of freedom and imbalance statistics, as well as linear solver iteration counts Waiwera 1.0 released 24 November 2019 - Waiwera version 1.0 has just been released, after five years of development and testing. The Waiwera team would like to thank everyone who contributed to making this possible, including MBIE and Contact Energy for financial support; Matt Knepley and others on the PETSc team, for invaluable advice and support; and Joseph Levin for developing the FSON library.","title":"News"},{"location":"news/#whats-new","text":"","title":"What's new?"},{"location":"news/#waiwera-140-released","text":"30 June 2023 - Waiwera version 1.4.0 is now released. The changes in this version include: source networks , representing interacting networks of sources and sinks, for modelling e.g. multi-feed wells, borefields with grouped production wells (and optional limits or targets imposed on the group), or reinjection salt equation of state modules - Waiwera now includes three new EOS modules for modelling mixtures of non-isothermal water, salt (sodium chloride) and non-condensible gases (currently carbon dioxide or air). These new EOS modules are wse (water, salt, energy), wsae (water, salt, air, energy) and wsce (water, salt, carbon dioxide, energy). allowing sources with no associated cell (e.g. for reinjection outside the model) allowing unlimited number of time steps (by setting time.step.maximum.number to null ) various minor code modifications to allow building Waiwera using newer versions (10, 11) of gfortran","title":"Waiwera 1.4.0 released"},{"location":"news/#waiwera-131-released","text":"29 June 2022 - Waiwera version 1.3.1 is now released. The changes in this version include: time-dependent rock properties - rock permeabilities and porosities can now be assigned prescribed time-dependent values. modified handling of Dirichlet boundary conditions - equations for boundary ghost cells are no longer included in the Jacobian matrix (used to solve the non-linear flow equations at each time step). This makes the Jacobian significantly less ill-conditioned and slightly smaller. Jacobian output - Jacobian matrices can now be optionally output to a binary file. These may be used e.g. for inverse modelling or uncertainty quantification. added ability to set Jacobian differencing parameters in input (rather than as PETSc arguments). Modified time stepping behaviour around checkpoints - the pre-checkpoint time step size is now restored after hitting a checkpoint. PETSc update - PETSc version 3.15.5 will be downloaded and built if PETSc is not found on the system.","title":"Waiwera 1.3.1 released"},{"location":"news/#waiwera-130-released","text":"8 September 2021 - Waiwera version 1.3.0 is now released. The changes in this version include: tracers - Waiwera can now simulate passive tracers. Any number of tracers can be simulated, in conjunction with any equation of state. Tracers may be either liquid-phase or vapour-phase, and the effects of diffusion and decay can be included. Decay can be constant or temperature-dependent. The tracer equations are solved independently of the flow equations, with only one additional linear solve needed per time step. output at faces - Waiwera can now optionally output results on mesh faces, e.g. component or phase mass or energy fluxes, and also face geometry (areas etc.) to the output HDF5 file. Face output is fully configurable by the user. It is also now possible to control (e.g. omit) the output of cell geometry data. PETSc update - PETSc version 3.15.2 or later is now required, and PETSc 3.15.4 will be downloaded and built if PETSc is not found on the system. new output datasets in the HDF5 file to simplify post-processing MINC simulations - these contain the MINC level and parent cell index for each cell in the output the Waiwera Docker images should now run on older CPUs. Previously the Docker images contained a PETSc library built using compiler settings which prevented it from running on older CPUs. This is now built using more generic settings so it should run on any x86 CPU capable of running Docker. a fix for a minor issue which prevented native Linux builds on distributions which no longer have Python 2 installed by default (e.g. Ubuntu 20.04) the user guide has new material on using the recently-released Layermesh library to create meshes for Waiwera models, and use them for pre- and post-processing the Waiwera continuous integration (CI) pipeline has been transferred from Travis CI to Github Actions","title":"Waiwera 1.3.0 released"},{"location":"news/#waiwera-121-released","text":"20 July 2020 - Waiwera version 1.2.1 is now released. The main change in this version is that the installation process will now install MPICH instead of OpenMPI , if it does not detect any existing MPI on the system. This change was prompted by an apparent memory leak (possibly this one ) in some versions of OpenMPI, including version 3.1.3 which was used in the Waiwera 1.2 Docker image. That version of OpenMPI also has another bug which causes error messages when running in Docker containers. Waiwera 1.2 introduced a workaround for this bug in the waiwera-dkr script, but with the change to MPICH this is no longer needed, and has now been removed.","title":"Waiwera 1.2.1 released"},{"location":"news/#waiwera-12-released","text":"8 June 2020 - Waiwera version 1.2 is now released. The changes in this version include: PETSc update : PETSc version 3.13.2 or later is now required, and PETSc 3.13.2 will be downloaded and built if PETSc is not found on the system. this new version of PETSc includes substantial modifications to the DMPlex class, including the ability to handle hybrid meshes with arbitrary mixes of cell types (8-node hexahedron, 6-node wedge, etc.). This means Waiwera is also now able to handle these meshes. a modification to the behaviour of the deliverability source control when a threshold pressure is specified. The deliverability control will now deactivate if the computed flow rate is larger in magnitude than the specified production rate (which can happen for time-dependent specified flow rates). the Waiwera executable now has --version and --help command line arguments . Running with no arguments now gives the more common behaviour of printing the help information, rather than prompting for a filename. the Travis continuous integration ( CI ) pipeline now includes the full suite of benchmark tests as well as just the unit tests. users can now run the benchmark tests via Docker , by passing the --docker argument to the benchmark test script. Waiwera Docker images are now based on a Debian 10 base image (was Debian 9 in previous versions). the waiwera-dkr utility now has --version and revised --help arguments, and its default number of parallel processes is now 1 (rather than the maximum available).","title":"Waiwera 1.2 released"},{"location":"news/#waiwera-journal-article-published","text":"23 May 2020 - the journal Computers and Geosciences has just published a research article titled \"Waiwera: a parallel open-source geothermal flow simulator\" . This contains details on why Waiwera was written, the governing equations used, numerical formulation and other implementation details, as well as results from various test problems.","title":"Waiwera journal article published"},{"location":"news/#waiwera-11-released","text":"31 January 2020 - Waiwera version 1.1 is now released. This is a significant update and includes the following changes: MINC mesh rebalancing : after MINC processing, the mesh is redistributed to regain optimal load balancing, and hence better scaling behaviour for large parallel MINC problems. This entailed a substantial rewrite of parts of the Waiwera MINC code. PETSc update : PETSc version 3.12 or later is now required (some of its new features and bugfixes are needed for the MINC mesh rebalancing). If PETSc is not found on the system, version 3.12.3 will be downloaded and built. PyWaiwera : this is a new Python library for working with Waiwera simulations. Its source is in the main Waiwera source tree under /utils/pywaiwera , and it can be installed from PyPI using pip . For now, it contains only code related to running Waiwera via Docker, either from Python scripts or from the command line, for which it installs an executable waiwera-dkr script (which replaces the previous waiwera-dkr.py script). In future it is invisaged that other modules will be added to PyWaiwera, for assisting with pre- and post-processing. the new waiwera-dkr script includes many improvements and some new features, for example downloading example model input files using the --examples option. continuous integration (CI) using Travis for automated building/testing of Waiwera. additional log file messages for reporting simulation degrees of freedom and imbalance statistics, as well as linear solver iteration counts","title":"Waiwera 1.1 released"},{"location":"news/#waiwera-10-released","text":"24 November 2019 - Waiwera version 1.0 has just been released, after five years of development and testing. The Waiwera team would like to thank everyone who contributed to making this possible, including MBIE and Contact Energy for financial support; Matt Knepley and others on the PETSc team, for invaluable advice and support; and Joseph Levin for developing the FSON library.","title":"Waiwera 1.0 released"},{"location":"pubs/","text":"Publications Journal articles Croucher, A.E., O'Sullivan, M.J., O'Sullivan, J.P, Yeh, A., Burnell, J. and Kissling, W. (2020). Waiwera: A parallel open-source geothermal flow simulator . Computers and Geosciences 141, https://doi.org/10.1016/j.cageo.2020.104529 . Conference papers O'Sullivan, J.P., Renaud, T., Croucher, A.E., Yeh, A., Gravatt, M.J., Riffault, J., Popineau, J. and O'Sullivan, M.J. (2021). Comparisons of AUTOUGH2 and Waiwera on geothermal fields . Proceedings of the 43 rd New Zealand Geothermal Workshop, Wellington, New Zealand. Croucher, A.E., O'Sullivan, M.J. and O'Sullivan, J.P. (2021). Modelling tracers using the Waiwera geothermal flow simulator . Proceedings of the 43 rd New Zealand Geothermal Workshop, Wellington, New Zealand. Dekkers, K., van Vlijmen, M., O'Sullivan, J.P., Gravatt, M.J., Popineau, J. and O'Sullivan, M.J. (2020). An updated computer model of the Rotorua geothermal field . Proceedings of the 42 nd New Zealand Geothermal Workshop, Waitangi, New Zealand. Croucher, A.E., O'Sullivan, M.J., O'Sullivan, J.P., Yeh, A., Burnell, J. and Kissling, W. (2019). An update on the Waiwera geothermal flow simulator: development and applications . Proceedings of the 41 st New Zealand Geothermal Workshop, Auckland, New Zealand. O'Sullivan, J.P, Croucher, A.E., Popineau, J., Yeh, A. and O'Sullivan, M.J. (2019). Working with multi-million block geothermal reservoir models . Proceedings , 44 th Workshop on Geothermal Reservoir Engineering, Stanford University, Stanford, California. O'Sullivan, J.P., Croucher, A.E., Yeh, A. and O'Sullivan, M.J. (2017). Experiments with Waiwera, a new geothermal simulator . Proceedings of the 39 th New Zealand Geothermal Workshop, Rotorua, New Zealand. Croucher, A.E., O'Sullivan, M.J., O'Sullivan, J.P., Pogacnik, J., Burnell, J. and Kissling, W. (2017). Geothermal Supermodels project: an update on flow simulator development . Proceedings of the 39 th New Zealand Geothermal Workshop, Rotorua, New Zealand. Croucher, A.E., O'Sullivan, M.J., O'Sullivan, J.P., Pogacnik, J., Burnell, J. and Kissling, W. (2016). Geothermal Supermodels project: an update on flow simulator development . Proceedings of the 38 th New Zealand Geothermal Workshop, Auckland, New Zealand. Croucher, A.E., O'Sullivan, M.J., O'Sullivan, J.P., Pogacnik, J., Yeh, A., Burnell, J. and Kissling, W. (2016). Geothermal Supermodels project: an update on flow simulator development . Proceedings of the 37 th New Zealand Geothermal Workshop, Taupo, New Zealand.","title":"Publications"},{"location":"pubs/#publications","text":"","title":"Publications"},{"location":"pubs/#journal-articles","text":"Croucher, A.E., O'Sullivan, M.J., O'Sullivan, J.P, Yeh, A., Burnell, J. and Kissling, W. (2020). Waiwera: A parallel open-source geothermal flow simulator . Computers and Geosciences 141, https://doi.org/10.1016/j.cageo.2020.104529 .","title":"Journal articles"},{"location":"pubs/#conference-papers","text":"O'Sullivan, J.P., Renaud, T., Croucher, A.E., Yeh, A., Gravatt, M.J., Riffault, J., Popineau, J. and O'Sullivan, M.J. (2021). Comparisons of AUTOUGH2 and Waiwera on geothermal fields . Proceedings of the 43 rd New Zealand Geothermal Workshop, Wellington, New Zealand. Croucher, A.E., O'Sullivan, M.J. and O'Sullivan, J.P. (2021). Modelling tracers using the Waiwera geothermal flow simulator . Proceedings of the 43 rd New Zealand Geothermal Workshop, Wellington, New Zealand. Dekkers, K., van Vlijmen, M., O'Sullivan, J.P., Gravatt, M.J., Popineau, J. and O'Sullivan, M.J. (2020). An updated computer model of the Rotorua geothermal field . Proceedings of the 42 nd New Zealand Geothermal Workshop, Waitangi, New Zealand. Croucher, A.E., O'Sullivan, M.J., O'Sullivan, J.P., Yeh, A., Burnell, J. and Kissling, W. (2019). An update on the Waiwera geothermal flow simulator: development and applications . Proceedings of the 41 st New Zealand Geothermal Workshop, Auckland, New Zealand. O'Sullivan, J.P, Croucher, A.E., Popineau, J., Yeh, A. and O'Sullivan, M.J. (2019). Working with multi-million block geothermal reservoir models . Proceedings , 44 th Workshop on Geothermal Reservoir Engineering, Stanford University, Stanford, California. O'Sullivan, J.P., Croucher, A.E., Yeh, A. and O'Sullivan, M.J. (2017). Experiments with Waiwera, a new geothermal simulator . Proceedings of the 39 th New Zealand Geothermal Workshop, Rotorua, New Zealand. Croucher, A.E., O'Sullivan, M.J., O'Sullivan, J.P., Pogacnik, J., Burnell, J. and Kissling, W. (2017). Geothermal Supermodels project: an update on flow simulator development . Proceedings of the 39 th New Zealand Geothermal Workshop, Rotorua, New Zealand. Croucher, A.E., O'Sullivan, M.J., O'Sullivan, J.P., Pogacnik, J., Burnell, J. and Kissling, W. (2016). Geothermal Supermodels project: an update on flow simulator development . Proceedings of the 38 th New Zealand Geothermal Workshop, Auckland, New Zealand. Croucher, A.E., O'Sullivan, M.J., O'Sullivan, J.P., Pogacnik, J., Yeh, A., Burnell, J. and Kissling, W. (2016). Geothermal Supermodels project: an update on flow simulator development . Proceedings of the 37 th New Zealand Geothermal Workshop, Taupo, New Zealand.","title":"Conference papers"},{"location":"userguide/","text":"User guide The online Waiwera user guide can be found on its Read The Docs page .","title":"User guide"},{"location":"userguide/#user-guide","text":"The online Waiwera user guide can be found on its Read The Docs page .","title":"User guide"}]}