{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>a parallel, open-source geothermal flow simulator</p> <p>Waiwera features:</p> <ul> <li>numerical simulation of high-temperature subsurface flows, including robust phase changes</li> <li>parallel execution on shared- or distributed-memory computers and clusters</li> <li>use of PETSc (Portable Extensible Toolkit for Scientific Computation) for parallel data structures, linear and non-linear solvers, etc.</li> <li>standard file formats for input (JSON) and output (HDF5, YAML)</li> <li>structured, object-oriented code written in Fortran 2003</li> <li>free, open-source license</li> </ul> <p>Waiwera was developed at the University of Auckland's Geothermal Institute. Initial development was part of the \"Geothermal Supermodels\" research project, funded by the NZ Ministry of Business, Innovation and Employment (MBIE), with additional support from Contact Energy Ltd.</p> <p>The word Waiwera comes from the M\u0101ori language and means \"hot water\".</p>"},{"location":"contrib/","title":"Contributing to Waiwera","text":"<p>Because Waiwera is released under a free, open-source license, you may contribute code.</p> <p>Waiwera's source code is written in Fortran 2003, so you will need to be familiar with that in order to contribute. You will also need to know how to use the Git version control system. Depending on which parts of the code you want to work on, you may also need some familiarity with the PETSc library.</p>"},{"location":"contrib/#pull-requests","title":"Pull requests","text":"<p>You can contribute code to Waiwera by submitting a \"pull request\". To do this, first you need to fork the Waiwera repository and check it out onto your local machine. You can commit your changes locally and then push them back up to your fork on Github. Finally, you can make a pull request on the Waiwera repository.</p> <p>Your proposed changes will then be reviewed, discussed and altered as necessary. If it is agreed that your changes are appropriate then they will be merged into the Waiwera code.</p>"},{"location":"contrib/#unit-tests","title":"Unit tests","text":"<p>Waiwera uses a test-driven development cycle, so in general any new code should be accompanied by unit tests to make sure it works correctly. Waiwera uses the Zofu library for creating unit tests.</p>"},{"location":"contrib/#reporting-issues","title":"Reporting issues","text":"<p>You can also help improve Waiwera by reporting any issues.</p>"},{"location":"install/","title":"Installation","text":"<p>Waiwera can be run on most operating systems (e.g. Linux, Windows, Mac OS) using Docker. For many users this will be the easiest option. Linux users also have the option of building a native Waiwera executable.</p> <p>For full details, see the installation instructions in the Waiwera user guide.</p>"},{"location":"install/#using-docker","title":"Using Docker","text":"<p>When using Docker, Waiwera is run in a \"container\" holding the code and all its dependencies, isolated from the host machine, so that it should always run the same way.</p> <p>First, Docker itself needs to be installed.</p>"},{"location":"install/#installing-docker","title":"Installing Docker","text":"<p>For Windows users, the Windows 10 Pro, Enterprise or Education versions are recommended, in which case Docker Desktop can be used. For other Windows versions, the older Docker Toolbox can be used, but this is less convenient and has a higher performance overhead than Docker Desktop.</p> <p>Similarly, users of macOS version 10.13 or later can use Docker Desktop, but users of older versions can use Docker Toolbox.</p> <p>Linux users can install Docker from their package management system.</p>"},{"location":"install/#installing-pywaiwera","title":"Installing PyWaiwera","text":"<p>The easiest way to run Waiwera via Docker is by using the <code>waiwera-dkr</code> script, which is supplied as part of the PyWaiwera Python library. You will need to have Python installed on your machine. Then PyWaiwera can be installed from the Python Package Index (PyPI) using the <code>pip</code> package manager, e.g. <code>pip install pywaiwera</code>.</p>"},{"location":"install/#running-using-docker","title":"Running using Docker","text":"<p>The <code>waiwera-dkr</code> script handles installing and updating the Waiwera Docker container image, running Waiwera in the container, and managing the sharing of files between the container and your simulation directory. For example:</p> <pre><code> waiwera-dkr -np 16 model.json\n</code></pre> <p>uses Docker to run the model with JSON input file <code>model.json</code> on Waiwera, using 16 parallel processes.</p>"},{"location":"install/#native-linux-build","title":"Native Linux build","text":"<p>Building a native Waiwera executable on Linux systems can be carried out using Ansible, which manages checking and installing any necessary tools (compilers, build tools etc.), building dependency libraries and building Waiwera itself (which is done using the Meson build system).</p> <p>This is essentially a three-step process: installing Ansible, cloning or downloading the Waiwera source code, and building the Waiwera executable.</p>"},{"location":"issues/","title":"Issues","text":"<p>Any issues, e.g. bug reports or feature requests, can be reported via the issue tracker on our Github repository.</p>"},{"location":"issues/#check-existing-issues","title":"Check existing issues","text":"<p>Before you report a new issue, please check through the existing issues first to make sure nobody else has already reported it. If they have, you may add a comment (if necessary) to the existing issue.</p>"},{"location":"issues/#bug-reports","title":"Bug reports","text":"<p>If you are making a bug report, please include as much detail as possible to help us identify the bug.</p>"},{"location":"license/","title":"License","text":"<p>Waiwera is free, open-source software released under the GNU Lesser General Public License (LGPL version 3), with source code available from our Github repository.</p> <p>Amongst other things, this means:</p> <ul> <li>anyone may potentially contribute code to Waiwera</li> <li>if you make modifications to your own copy of the Waiwera code, you are legally obliged to share those modifications back with the Waiwera project</li> </ul>"},{"location":"pubs/","title":"Publications","text":""},{"location":"pubs/#journal-articles","title":"Journal articles","text":"<ul> <li>Croucher, A.E., O'Sullivan, M.J., O'Sullivan, J.P, Yeh, A., Burnell, J. and Kissling, W. (2020). Waiwera: A parallel open-source geothermal flow simulator. Computers and Geosciences 141, https://doi.org/10.1016/j.cageo.2020.104529.</li> </ul>"},{"location":"pubs/#conference-papers","title":"Conference papers","text":""},{"location":"pubs/#2023","title":"2023","text":"<ul> <li>Croucher, A.E., Renaud, T., O'Sullivan, J.P., O'Sullivan, M.J. and Riffault, J. (2023). Equation of state modules for Waiwera including water, chloride and non-condensible gas. Proceedings of the 45<sup>th</sup> New Zealand Geothermal Workshop, Auckland, New Zealand.</li> <li>Dekkers, K., Croucher, A.E., Gravatt, M., Renaud, T., Nicholson, R., Maclaren, O., O'Sullivan, J.P. and O'Sullivan, M.J. (2023). Cloud computing for complex geothermal simulations using the parallel software Waiwera. Proceedings of the 45<sup>th</sup> New Zealand Geothermal Workshop, Auckland, New Zealand.</li> </ul>"},{"location":"pubs/#2022","title":"2022","text":"<ul> <li>Croucher, A.E., Yeh, A., O'Sullivan, M.J. and O'Sullivan, J.P. (2022). Modelling source networks with the Waiwera geothermal flow simulator. Proceedings of the 44<sup>th</sup> New Zealand Geothermal Workshop, Auckland, New Zealand.</li> <li>Popineau, J., Renaud, T., O'Sullivan, J. and Dorado, J.G. (2022). Production history modelling of a low enthalpy geothermal reservoir used for district heating: example of the Paris sedimentary basin. Proceedings of the 44<sup>th</sup> New Zealand Geothermal Workshop, Auckland, New Zealand.</li> <li>Dekkers, K., Gravatt, M., Maclaren, O., Nicholson, J., Nugraha, R., O'Sullivan, M., Popineau, J., Riffault, J. and O'Sullivan, J. (2022). Resource assessment: estimating the potential of a geothermal reservoir. Proceedings of the 47<sup>th</sup> Workshop on Geothermal Reservoir Engineering, Stanford University, Stanford, California.</li> </ul>"},{"location":"pubs/#2021","title":"2021","text":"<ul> <li>O'Sullivan, J.P., Renaud, T., Croucher, A.E., Yeh, A., Gravatt, M.J., Riffault, J., Popineau, J. and O'Sullivan, M.J. (2021). Comparisons of AUTOUGH2 and Waiwera on geothermal fields. Proceedings of the 43<sup>rd</sup> New Zealand Geothermal Workshop, Wellington, New Zealand.</li> <li>Croucher, A.E., O'Sullivan, M.J. and O'Sullivan, J.P. (2021). Modelling tracers using the Waiwera geothermal flow simulator. Proceedings of the 43<sup>rd</sup> New Zealand Geothermal Workshop, Wellington, New Zealand.</li> </ul>"},{"location":"pubs/#2020","title":"2020","text":"<ul> <li>Dekkers, K., van Vlijmen, M., O'Sullivan, J.P., Gravatt, M.J., Popineau, J. and O'Sullivan, M.J. (2020). An updated computer model of the Rotorua geothermal field. Proceedings of the 42<sup>nd</sup> New Zealand Geothermal Workshop, Waitangi, New Zealand.</li> </ul>"},{"location":"pubs/#2019","title":"2019","text":"<ul> <li>Croucher, A.E., O'Sullivan, M.J., O'Sullivan, J.P., Yeh, A., Burnell, J. and Kissling, W. (2019). An update on the Waiwera geothermal flow simulator: development and applications. Proceedings of the 41<sup>st</sup> New Zealand Geothermal Workshop, Auckland, New Zealand.</li> <li>O'Sullivan, J.P, Croucher, A.E., Popineau, J., Yeh, A. and O'Sullivan, M.J. (2019). Working with multi-million block geothermal reservoir models. Proceedings, 44<sup>th</sup> Workshop on Geothermal Reservoir Engineering, Stanford University, Stanford, California.</li> </ul>"},{"location":"pubs/#2017","title":"2017","text":"<ul> <li>O'Sullivan, J.P., Croucher, A.E., Yeh, A. and O'Sullivan, M.J. (2017). Experiments with Waiwera, a new geothermal simulator. Proceedings of the 39<sup>th</sup> New Zealand Geothermal Workshop, Rotorua, New Zealand.</li> <li>Croucher, A.E., O'Sullivan, M.J., O'Sullivan, J.P., Pogacnik, J., Burnell, J. and Kissling, W. (2017). Geothermal Supermodels project: an update on flow simulator development. Proceedings of the 39<sup>th</sup> New Zealand Geothermal Workshop, Rotorua, New Zealand.</li> </ul>"},{"location":"pubs/#2016","title":"2016","text":"<ul> <li>Croucher, A.E., O'Sullivan, M.J., O'Sullivan, J.P., Pogacnik, J., Burnell, J. and Kissling, W. (2016). Geothermal Supermodels project: an update on flow simulator development. Proceedings of the 38<sup>th</sup> New Zealand Geothermal Workshop, Auckland, New Zealand.</li> <li>Croucher, A.E., O'Sullivan, M.J., O'Sullivan, J.P., Pogacnik, J., Yeh, A., Burnell, J. and Kissling, W. (2016). Geothermal Supermodels project: an update on flow simulator development. Proceedings of the 37<sup>th</sup> New Zealand Geothermal Workshop, Taupo, New Zealand.</li> </ul>"},{"location":"releases/","title":"Waiwera releases","text":""},{"location":"releases/#150","title":"1.5.0","text":"<p>Date: 14 October 2024</p> <p>Changes:</p> <ul> <li>significantly improved non-linear solver convergence and   time-stepping behaviour when using source networks (from   modifications to the Jacobian matrix)</li> <li>improved handling of deliverability thresholds</li> <li>new option for reading simulation start time (<code>time.start</code>) from   initial conditions HDF5 file</li> <li>new option for setting negative <code>initial.index</code>, e.g. -1 to start   from last set of results in initial conditions HDF5 file   (note: this is now the default)</li> <li>initial conditions filename added to YAML logfile summary info</li> <li>new option for flushing of output HDF5 file</li> <li>added piecewise cubic Hermite (PCHIP) option for interpolation   tables</li> <li>allow selection of mesh partitioner type</li> <li>an error is now raised if progressive scaling is used with a source   network group separator</li> <li>new option for pressure-dependent cutoff pressure in   deliverability source control -- for simulating e.g. pumps</li> <li>Docker image updated to use a Debian 12 base image and Python 3</li> <li>PETSc update - PETSc version 3.22.0 or later is now required,   and PETSc 3.22.0 will be downloaded and built if PETSc is not found   on the system (some changes to the Waiwera code were required to   accommodate changes made to PETSc since version 3.15)</li> <li>revamped user guide based on the Shibuya Sphinx theme</li> <li>updated PyWaiwera Python packaging using <code>pyproject.toml</code>   configuration file</li> </ul>"},{"location":"releases/#140","title":"1.4.0","text":"<p>Date: 30 June 2023</p> <p>Changes:</p> <ul> <li>source networks, representing interacting networks of sources   and sinks, for modelling e.g. multi-feed wells, borefields with   grouped production wells (and optional limits or targets imposed on   the group), or reinjection</li> <li>salt equation of state modules - Waiwera now includes three new   EOS modules for modelling mixtures of non-isothermal water, salt   (sodium chloride) and non-condensible gases (currently carbon   dioxide or air). These new EOS modules are <code>wse</code> (water, salt,   energy), <code>wsae</code> (water, salt, air, energy) and <code>wsce</code> (water, salt,   carbon dioxide, energy).</li> <li>allowing sources with no associated cell (e.g. for reinjection outside   the model)</li> <li>allowing unlimited number of time steps (by setting   <code>time.step.maximum.number</code> to <code>null</code>)</li> <li>various minor code modifications to allow building Waiwera using   newer versions (10, 11) of <code>gfortran</code></li> </ul>"},{"location":"releases/#131","title":"1.3.1","text":"<p>Date: 29 June 2022</p> <p>Changes:</p> <ul> <li>time-dependent rock properties - rock permeabilities and   porosities can now be assigned prescribed time-dependent values.</li> <li>modified handling of Dirichlet boundary conditions - equations   for boundary ghost cells are no longer included in the Jacobian   matrix (used to solve the non-linear flow equations at each time   step). This makes the Jacobian significantly less ill-conditioned   and slightly smaller.</li> <li>Jacobian output - Jacobian matrices can now be optionally output   to a binary file. These may be used e.g. for inverse modelling or   uncertainty quantification.</li> <li>added ability to set Jacobian differencing parameters in input   (rather than as PETSc arguments).</li> <li>Modified time stepping behaviour around checkpoints - the   pre-checkpoint time step size is now restored after hitting a   checkpoint.</li> <li>PETSc update - PETSc version 3.15.5 will be downloaded and built   if PETSc is not found on the system.</li> </ul>"},{"location":"releases/#130","title":"1.3.0","text":"<p>Date: 8 September 2021</p> <p>Changes:</p> <ul> <li>tracers - Waiwera can now simulate passive tracers. Any number   of tracers can be simulated, in conjunction with any equation of   state. Tracers may be either liquid-phase or vapour-phase, and the   effects of diffusion and decay can be included. Decay can be   constant or temperature-dependent. The tracer equations are solved   independently of the flow equations, with only one additional linear   solve needed per time step.</li> <li>output at faces - Waiwera can now optionally output results on   mesh faces, e.g. component or phase mass or energy fluxes, and also   face geometry (areas etc.) to the output HDF5 file. Face output is   fully configurable by the user. It is also now possible to control   (e.g. omit) the output of cell geometry data.</li> <li>PETSc update - PETSc version 3.15.2 or later is now required,   and PETSc 3.15.4 will be downloaded and built if PETSc is not found   on the system.</li> <li>new output datasets in the HDF5 file to simplify post-processing   MINC simulations - these contain the MINC level and parent cell   index for each cell in the output</li> <li>the Waiwera Docker images should now run on older   CPUs. Previously the Docker images contained a PETSc library built   using compiler settings which prevented it from running on older   CPUs. This is now built using more generic settings so it should run   on any x86 CPU capable of running Docker.</li> <li>a fix for a minor issue which prevented native Linux builds on   distributions which no longer have Python 2 installed by default   (e.g. Ubuntu 20.04)</li> <li>the user guide has new material on using the recently-released   Layermesh library to   create meshes for Waiwera models, and use them for pre- and   post-processing</li> <li>the Waiwera continuous integration (CI) pipeline has been   transferred from Travis CI to Github Actions</li> </ul>"},{"location":"releases/#121","title":"1.2.1","text":"<p>Date: 20 July 2020</p> <p>The main change in this version is that the installation process will now install MPICH instead of OpenMPI, if it does not detect any existing MPI on the system.</p> <p>This change was prompted by an apparent memory leak (possibly this one) in some versions of OpenMPI, including version 3.1.3 which was used in the Waiwera 1.2 Docker image.</p> <p>That version of OpenMPI also has another bug which causes error messages when running in Docker containers. Waiwera 1.2 introduced a workaround for this bug in the <code>waiwera-dkr</code> script, but with the change to MPICH this is no longer needed, and has now been removed.</p>"},{"location":"releases/#120","title":"1.2.0","text":"<p>Date: 8 June 2020</p> <p>Changes:</p> <ul> <li>PETSc update: PETSc version 3.13.2 or later is now required, and     PETSc 3.13.2 will be downloaded and built if PETSc is not found on     the system.</li> <li>this new version of PETSc includes substantial modifications to the     DMPlex class, including the ability to handle hybrid meshes     with arbitrary mixes of cell types (8-node hexahedron, 6-node     wedge, etc.). This means Waiwera is also now able to handle these     meshes.</li> <li>a modification to the behaviour of the deliverability source   control when a threshold pressure is specified. The deliverability   control will now deactivate if the computed flow rate is larger in   magnitude than the specified production rate (which can happen for   time-dependent specified flow rates).</li> <li>the Waiwera executable now has <code>--version</code> and <code>--help</code> command   line arguments. Running with no arguments now gives the more   common behaviour of printing the help information, rather than   prompting for a filename.</li> <li>the Travis continuous integration (CI) pipeline now includes the   full suite of benchmark tests as well as just the unit tests.</li> <li>users can now run the benchmark tests via Docker, by passing   the <code>--docker</code> argument to the benchmark test script.</li> <li>Waiwera Docker images are now based on a Debian 10 base image   (was Debian 9 in previous versions).</li> <li>the <code>waiwera-dkr</code> utility now has <code>--version</code> and revised <code>--help</code>   arguments, and its default number of parallel processes is now 1   (rather than the maximum available).</li> </ul>"},{"location":"releases/#110","title":"1.1.0","text":"<p>Date: 31 January 2020</p> <p>Changes:</p> <ul> <li>MINC mesh rebalancing: after MINC processing, the mesh is   redistributed to regain optimal load balancing, and hence better   scaling behaviour for large parallel MINC problems. This entailed a   substantial rewrite of parts of the Waiwera MINC code.</li> <li>PETSc update: PETSc version 3.12 or later is now required (some   of its new features and bugfixes are needed for the MINC mesh   rebalancing). If PETSc is not found on the system, version 3.12.3   will be downloaded and built.</li> <li>PyWaiwera: this is a new Python library for working with Waiwera   simulations. Its source is in the main Waiwera source tree under   <code>/utils/pywaiwera</code>, and it can be installed from PyPI using   <code>pip</code>. For now, it contains only code related to running Waiwera via   Docker, either from Python scripts or from the command line, for   which it installs an executable <code>waiwera-dkr</code> script (which replaces   the previous <code>waiwera-dkr.py</code> script). In future it is invisaged   that other modules will be added to PyWaiwera, for assisting with   pre- and post-processing.</li> <li>the new <code>waiwera-dkr</code> script includes many improvements and some   new features, for example downloading example model input files   using the <code>--examples</code> option.</li> <li>continuous integration (CI) using Travis   for automated building/testing of Waiwera.</li> <li>additional log file messages for reporting simulation degrees of   freedom and imbalance statistics, as well as linear solver iteration   counts</li> </ul>"},{"location":"releases/#100","title":"1.0.0","text":"<p>Date: 24 November 2019</p> <p>Waiwera version 1.0 has just been released, after five years of development and testing.</p> <p>The Waiwera team would like to thank everyone who contributed to making this possible, including MBIE and Contact Energy for financial support; Matt Knepley and others on the PETSc team, for invaluable advice and support; and Joseph Levin for developing the FSON library.</p>"},{"location":"userguide/","title":"User guide","text":"<p>The online Waiwera user guide can be found here.</p>"}]}